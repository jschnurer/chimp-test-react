{"version":3,"sources":["Game/Square.jsx","Game/Board.jsx","Game/Game.jsx","App.js","serviceWorker.js","index.js"],"names":["Square","props","isHidden","hidden","number","revealed","react_default","a","createElement","Fragment","className","onClick","onNumberClick","onBlankClick","Board","rows","Array","apply","length","height","map","Number","call","cells","width","row","key","cell","gameState","numbers","arr","filter","n","position","x","y","Game","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","numDigits","boardWidth","boardHeight","positions","getRandomInt","min","max","Math","floor","random","restartGame","possiblePositions","slice","i","push","splice","setState","turnNumber","expectedNumber","beginPlay","onCorrectClick","num","onGameWin","state","prevState","onIncorrectClick","href","React","Component","App","Game_Game_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0e9315d9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Square (props) {\r\n    let isHidden = props.hidden;\r\n\r\n    if(props.number && props.number.revealed) {\r\n        return <React.Fragment></React.Fragment>\r\n    }\r\n\r\n    if (!props.number) {\r\n      return <React.Fragment></React.Fragment>\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={\"square\" + (isHidden ? \" hidden\" : \"\")}\r\n            onClick={() => {props.number ? props.onNumberClick(props.number.number) : props.onBlankClick()}}>\r\n            {props.number &&\r\n                props.number.number}\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport Square from './Square';\r\n\r\nexport default function Board (props) {\r\n    let rows = Array.apply(null, {length: props.height}).map(Number.call, Number);\r\n    let cells = Array.apply(null, {length: props.width}).map(Number.call, Number);\r\n\r\n    let getNumOrNull = (arr) => {\r\n        if(!arr.length) {\r\n            return null;\r\n        }\r\n\r\n        return arr[0];\r\n    }\r\n\r\n    return (\r\n        <table>\r\n            <tbody>\r\n            {\r\n                rows.map(row => \r\n                    <tr key={row}>\r\n                        {\r\n                            cells.map(cell => \r\n                                <td key={cell}>\r\n                                    <Square\r\n                                        hidden={props.gameState === 'PLAY'}\r\n                                        number={!props.numbers.length\r\n                                            ? null\r\n                                            : getNumOrNull(props.numbers\r\n                                            .filter(n => n.position.x === cell && n.position.y === row ? n.number : null))}\r\n                                        onNumberClick={props.onNumberClick}\r\n                                        onBlankClick={props.onBlankClick} />\r\n                                </td>\r\n                            )\r\n                        }\r\n                    </tr>\r\n                )\r\n            }\r\n            </tbody>\r\n        </table>\r\n    );\r\n}","import React from 'react';\r\nimport Board from './Board';\r\nimport './Game.css';\r\n\r\nexport default class Game extends React.Component {\r\n    numDigits = 9;\r\n    boardWidth = 8;\r\n    boardHeight = 5;\r\n    positions = [];\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            gameState: 'MEMORIZE',\r\n            turnNumber: 1,\r\n            numbers: [],\r\n            expectedNumber: 1,\r\n        };\r\n\r\n        for(let y = 0; y < this.boardHeight; y++) {\r\n            for(let x = 0; x < this.boardWidth; x++) {\r\n                this.positions.push({x, y});\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.restartGame();\r\n    }\r\n\r\n    getRandomInt = (min, max) => {\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n\r\n    restartGame = () => {\r\n        let numbers = [];\r\n        let possiblePositions = this.positions.slice();\r\n\r\n        for(let i = 0; i < this.numDigits; i++) {\r\n            numbers.push({\r\n                number: i+1,\r\n                position: possiblePositions.splice(this.getRandomInt(0, possiblePositions.length - 1), 1)[0],\r\n                revealed: false,\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            gameState: 'MEMORIZE',\r\n            turnNumber: 1,\r\n            numbers,\r\n            expectedNumber: 1,\r\n        });\r\n    }\r\n\r\n    beginPlay = () => {\r\n        this.setState({\r\n            gameState: 'PLAY',\r\n            expectedNumber: 1,\r\n        });\r\n    }\r\n\r\n    onCorrectClick = (num) => {\r\n        if(num === this.numDigits) {\r\n            this.onGameWin();\r\n        }\r\n\r\n        let numbers = this.state.numbers.slice();\r\n        numbers[num - 1].revealed = true;\r\n\r\n        this.setState(prevState => ({\r\n            expectedNumber: prevState.expectedNumber + 1,\r\n            numbers,\r\n        }));\r\n    }\r\n\r\n    onIncorrectClick = () => {\r\n        this.setState({\r\n            gameState: 'FAIL',\r\n            numbers: [],\r\n        });\r\n    }\r\n\r\n    onNumberClick = (num) => {\r\n        if(this.state.gameState !== 'PLAY') {\r\n            return;\r\n        }\r\n\r\n        if(num === this.state.expectedNumber) {\r\n            this.onCorrectClick(num);\r\n        } else {\r\n            this.onIncorrectClick();\r\n        }\r\n    }\r\n\r\n    onBlankClick = () => {\r\n        if(this.state.gameState !== 'PLAY') {\r\n            return;\r\n        }\r\n\r\n        this.onIncorrectClick();\r\n    }\r\n\r\n    onGameWin = () => {\r\n        this.setState({\r\n            gameState: 'WIN',\r\n            numbers: [],\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"game\">\r\n                <h2>Chimp Memory Test</h2>\r\n                <p>Inspired by <a href=\"https://www.youtube.com/watch?v=ktkjUjcZid0\">MIND FIELD S3 E1 on Youtube.</a></p>\r\n                <p>\r\n                    You will be shown a series of numbers from 1-9.\r\n                    When you click the Start button the field of numbers will be hidden.\r\n                    You must then click the position of the hidden numbers from 1 to 9 in order.\r\n                </p>\r\n                <p>\r\n                    There are chimpanzees that are able to memorize the positions of the numbers in under 1 second.\r\n                    Good luck. :)\r\n                </p>\r\n                <Board\r\n                    width={this.boardWidth}\r\n                    height={this.boardHeight}\r\n                    numbers={this.state.numbers}\r\n                    gameState={this.state.gameState}\r\n                    onNumberClick={this.onNumberClick}\r\n                    onBlankClick={this.onBlankClick} />\r\n                {this.state.gameState === 'MEMORIZE' &&\r\n                    <button\r\n                        className=\"startButton\"\r\n                        onClick={this.beginPlay}>\r\n                        Start\r\n                    </button>\r\n                }\r\n                { (this.state.gameState === 'FAIL' || this.state.gameState === 'WIN') && \r\n                    <div className=\"message\">\r\n                        {this.state.gameState}\r\n                        \r\n                        <button\r\n                            className=\"startButton\"\r\n                            onClick={this.restartGame}>\r\n                            Play again\r\n                        </button>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Game from './Game/Game';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Game />\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}